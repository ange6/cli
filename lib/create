#!/usr/bin/env node

const download = require('download-git-repo')
const program = require('commander')
const exists = require('fs').existsSync
const path = require('path')
const ora = require('ora')
const userHome = require('user-home')
const tildify = require('tildify')
const chalk = require('chalk')
const inquirer = require('inquirer')
const rm = require('rimraf').sync
const logger = require('./logger')
const generate = require('./generate')
const checkVersion = require('./check-version')
const warnings = require('./warnings')
const localPath = require('./local-path')

const isLocalPath = localPath.isLocalPath
const getTemplatePath = localPath.getTemplatePath

// https://github.com/yuanhua-templates/vue-webpack
// https://github.com:samfung09/tpl-b#master

const yuanhua = {
  tmpFileName: `.yuanhua-tpl`,
  baseGitUrl: '',
  defaultGroup: 'yuanhua-tpl',
  defaultBranch: '#master'
}

/**
 * Usage.
 */

program
  .usage('<template-name> [project-name]')
  .option('-c, --clone', 'use git clone')
  .option('--offline', 'use cached template')

/**
 * Help.
 */

function help () {
  program.parse(process.argv)
  if (program.args.length < 1) return program.help()
}
help()

/**
 * Settings.
 */

//  模板名：webpack
let template = program.args[0]
const hasSlash = template.indexOf('/') > -1
const rawName = program.args[1]
const inPlace = !rawName || rawName === '.'
const name = inPlace ? path.relative('../', process.cwd()) : rawName
const to = path.resolve(rawName || '.')
const clone = program.clone || true
yuanhua.defaultBranch = template.indexOf('#') > -1 ? '' : yuanhua.defaultBranch

// 模板存储临时目录（/Users/user/.yuanhua-tpl/webpack）
const tmp = path.join(userHome, yuanhua.tmpFileName, template.replace(/[\/:]/g, '-'))

if (program.offline) {
  template = tmp
}

/**
 * Padding.
 */

process.on('exit', () => {
  console.log()
})

/**
 * 判断本地是否存在同名项目。
 * inPlace: false 存在
 *
 */
if (inPlace || exists(to)) {
  inquirer.prompt([{
    type: 'confirm',
    message: inPlace
      ? 'Generate project in current directory?'
      : 'Target directory exists. Continue?',
    name: 'ok'
  }]).then(answers => {
    if (answers.ok) {
      run()
    }
  }).catch(logger.fatal)
} else {
  run()
}

/**
 * Check, download and generate the project.
 */

function run () {
  // check if template is local
  if (isLocalPath(template)) {
    const templatePath = getTemplatePath(template)
    if (exists(templatePath)) {
      generate(name, templatePath, to, err => {
        if (err) logger.fatal(err)
        console.log()
        logger.success('Generated "%s".', name)
      })
    } else {
      logger.fatal('Local template "%s" not found.', template)
    }
  } else {
    checkVersion(() => {
      if (!hasSlash) {
        // use official templates
        const officialTemplate = `${yuanhua.baseGitUrl}${yuanhua.defaultGroup}/${template}${yuanhua.defaultBranch}`
        if (template.indexOf('#') !== -1) {
          downloadAndGenerate(officialTemplate)
        } else {
          if (template.indexOf('-2.0') !== -1) {
            warnings.v2SuffixTemplatesDeprecated(template, inPlace ? '' : name)
            return
          }

          // warnings.v2BranchIsNowDefault(template, inPlace ? '' : name)
          downloadAndGenerate(officialTemplate)
        }
      } else {
        downloadAndGenerate(template)
      }
    })
  }
}

/**
 * Download a generate from a template repo.
 *
 * @param {String} template
 */

function downloadAndGenerate (template) {
  const spinner = ora('downloading template')
  spinner.start()
  // Remove if local template exists
  if (exists(tmp)) rm(tmp)
  download(template, tmp, { clone }, err => {
    spinner.stop()
    if (err) logger.fatal('✖ Failed to download repo ' + template + ': ' + err.message.trim())
    generate(name, tmp, to, err => {
      if (err) logger.fatal(err)
      console.log()
      logger.success('🎉 Generated "%s".', name)
    })
  })
}

// const init = (template, dest, group = defaultGroup) => {
//   const downloadUrl = `${baseGitUrl}:${group}/${template}#${defaultBranch}`;
//   gitDownload(downloadUrl, dest, { clone: true }, err => {
//     if (err) {
//       const tips = `· Failed to download repo from ${downloadUrl}\n`;
//       spinner.fail(chalk.red(`  angel `) + tips);
//       process.exit();
//     }
//     spinner.succeed(chalk.green(`   🎉 angel `) + `· Generated "${dest}"\n`);
//   });
// };
